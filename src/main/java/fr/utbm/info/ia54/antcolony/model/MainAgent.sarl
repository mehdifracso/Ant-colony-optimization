package fr.utbm.info.ia54.antcolony.model;

import fr.utbm.info.ia54.antcolony.view.Display
import io.sarl.core.AgentTask
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.List

//Dont write over occurrences 
//Handle synchronization issues with synchronized() when needed
@SuppressWarnings("discouraged_occurrence_readonly_use", "potential_field_synchronization_problem")
agent MainAgent 
{
	var env : Environment; //Stores the position of the objects in the simulation
	var disp : Display; //Handles the view
	var met : Metrics; // Stores information on the simulation
	
	//Launching options
	var map : String 
	var isDebugMode : Boolean

	uses Logging, Lifecycle, Schedules

	//Im importing a String, toString is not inefficient
	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize 
	{
		loggingName = "Main Agent"
		info("Main agent spawned !");

		// Retrieve passed parameters like so
		map = occurrence.parameters.get(0) as String;
		isDebugMode = occurrence.parameters.get(1) as Boolean;
		env = new Environment(map);
		met = new Metrics(env);
		

		info("Environment initialized.");

		disp = new Display(env, met, isDebugMode);

		// Find a way to transfer the stage from StartWindow to here
		info("Display initialized.");

		disp.changeDisplayFrameTitle("Ant colony");

		// I guess we just want the visuals to update and we want the agents to update ASAP and not wait for next frame
		// So Im making 2 loops, altho agents arent as much a loop as they are a nonstop exchange
		info("Displaying...");
		displayLoop();

		info("Starting to loop...")
		startAgents();
	}
	
	def displayLoop(): void
	{
		var framerate : int = 60;
		val taskMain : AgentTask = task("Main Loop")
		// Stuff to do every frame :
		
		taskMain.every(1000 / framerate) 
		[
			
			disp.displaySimulationFrame();
			
		]
	}
	
	//Starts a new round
	def startAgents() : void
	{
		synchronized(met)
		{
			for (startCity : env.getCities()) {
				met.increaseActiveAgents();
				spawn(TravelerAgent, env, met, startCity, isDebugMode);
			}
		}
	}
	
	//Records the result of a finished agent
	on TravelsFinished
	{
		synchronized(met)
		{
			met.decreaseActiveAgents();
			var pathTaken : List<Road> = occurrence.pathTaken;
			var timeTaken : Long = occurrence.timeTaken;

			if (met.fastestTime.equals("TBD") || timeTaken < met.fastestTime.longValue) 
			{
				if (isDebugMode) 
				{
					info("new record!")
				}
				met.fastestTime = timeTaken.toString();
				met.formattedFastestPath = pathTaken;
			}

			for (road : pathTaken) 
			{
				road.increaseFutureWeight(timeTaken);
			}

			// Updates weights & starts a new round
			if (met.activeAgents == 0) 
			{
				met.increaseElapsedRounds();
				env.updateWeights();
				if (isDebugMode) 
				{
					info("New round")
				}
				startAgents();
			}
		}
	}
	
	on ExitApplicationEvent
	{
		killMe;
	}

	on Destroy 
	{
		info("The main agent has stopped.")
	}
}
