/** 
 * 
 */
package fr.utbm.info.ia54.antcolony.model

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.HashSet
import java.util.List
import java.util.Random
import java.util.Set

/**  
 * @author ma-pe
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent TravelerAgent 
{
	var env : Environment; 
	var met : Metrics;
	var startingCity : City;
	var currentCity : City;
	var visitedCities : Set<City>;
	var travelledRoads : List<Road>;
	var travelTime : Long;
	var isDebugMode : Boolean;
	
	uses Logging, Lifecycle, DefaultContextInteractions

	on Initialize 
	{
		env = occurrence.parameters.get(0) as Environment;
		met = occurrence.parameters.get(1) as Metrics;

		startingCity = occurrence.parameters.get(2) as City;
		isDebugMode = occurrence.parameters.get(3) as Boolean;

		currentCity = startingCity;
		visitedCities = new HashSet<City>();
		visitedCities.add(startingCity);
		travelledRoads = new ArrayList<Road>();
		travelTime = new Long(0);

		loggingName = "Traveler Agent - Round " + met.roundsElapsed + " - Starting city " + startingCity.name;

		if (isDebugMode) {
			info("Traveler agent spawned !");
		}

		travel();
		/*
		synchronized (met)
		{
			startingCity = occurrence.parameters.get(2) as City;
			isDebugMode = occurrence.parameters.get(3) as Boolean;

			currentCity = startingCity;
			visitedCities = new HashSet<City>();
			visitedCities.add(startingCity);
			travelledRoads = new ArrayList<Road>();
			travelTime = new Long(0);

			loggingName = "Traveler Agent - Round " + met.roundsElapsed + " - Starting city " + startingCity.name;

			if (isDebugMode) {
				info("Traveler agent spawned !");
			}

			travel();
		}
		*/
	}
	
	def travel() : void
	{
		var road : Road = null;
		while (visitedCities.size() != env.cities.size() || currentCity!=startingCity) 
		{
			//pick a road
			// Thats the most complex thing so Ill put it in another function
			road = pickRoad();
			
			//add traveltime
			travelTime=travelTime+road.timeTaken;
			
			//add to travelledroads and visitedcities (Dont need to worry about which one it is since this is a set)
			travelledRoads.add(road);
			visitedCities.addAll(road.getCities());
			
			//change location
			currentCity=road.travel(currentCity);

		}
		info("test before killme")
		emit(new TravelsFinished(travelledRoads, travelTime))
		// TODO : Crash on bigger maps
		//Round 0 goes smoothly here
		//But starting from round 1 city 1 (for 48 cities) or randomly around round 3-5 (for 5 cities) -
		//the environment's lists become unreadable in the debugger
		//And on city 31-32 it'll get stuck, entering the info before the killMe but not the killMe itself ???
		//Also the main agent stops spawning other agents at that point ?
		//Probably related to unreadable environment
		//However pickRoad still seems to work fine so its not the roads themselves
		//Its the environment
		//Note : If I sync met in the init it will instead stop on round 1 city 1 instead of waiting for city 31, on all maps
		if (startingCity.name.equals("City 30") || startingCity.name.equals("City 31") ||
			startingCity.name.equals("City 32"))
			info("debug")
		killMe;
	}

	//Maybe use SARL to build several road picking skills to test different methods of optimization
	// Maybe double check if all cities are connected if ever using custom maps ?
	def pickRoad() : Road 
	{
		var chosenRoad : Road = null;
		var availableRoads : List<Road> = new ArrayList<Road>();
		var reverseWeights : Float = new Float(0);
		var NormalizedReverseWeights : Float = new Float(0);
		var cumulativeNormalizedReverseWeights : Float = new Float(0);
		var totalWeights : Float = new Float(0);
		var totalReverseWeights : Float = new Float(0);
		var rng : Float = new Random().nextFloat();

		availableRoads = env.getAdjacentRoads(currentCity);
		Road.sortRoadsByWeights(availableRoads);

		for (road : availableRoads) {
			totalWeights = totalWeights + road.weight;
		}
		for (road : availableRoads) {
			totalReverseWeights = totalReverseWeights + totalWeights - road.weight;
		}

		for (road : availableRoads) {
			if (chosenRoad === null) {
				if (totalWeights == 0 || totalReverseWeights == 0) {
					cumulativeNormalizedReverseWeights = cumulativeNormalizedReverseWeights +
						1f / availableRoads.size();
					if (rng < cumulativeNormalizedReverseWeights) {
						chosenRoad = road;
					}
				} else {
					// We want smaller weights to be picked more often so we used reverse weights
					reverseWeights = totalWeights - road.weight;
					NormalizedReverseWeights = reverseWeights / totalReverseWeights;
					cumulativeNormalizedReverseWeights = cumulativeNormalizedReverseWeights +
						NormalizedReverseWeights;
					if (rng < cumulativeNormalizedReverseWeights) {
						chosenRoad = road;
					}
				}
			}
		}
		/*
		if(currentCity==startingCity)
		{
			info("debug")
		}
		*/
		return chosenRoad;
	}

	on ExitApplicationEvent 
	{
		killMe;
	}

	on Destroy 
	{
		info("test in killme")
		if (isDebugMode) 
		{
			info("The traveler agent was stopped.")
		}
	}
}
